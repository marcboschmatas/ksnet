[{"path":"https://octmedina.github.io/ksnet/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Octavio Medina Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://octmedina.github.io/ksnet/articles/color.html","id":"paletas-de-colores","dir":"Articles","previous_headings":"","what":"Paletas de colores","title":"Colores","text":"Por último, hemos creado paletas de colores. Por ahora hay dos: ksnet_classic y ksnet_bright. Para visualizarlas, basta con utilizar la función color_ksnet.","code":"color_ksnet(\"classic\") color_ksnet(\"bright\")"},{"path":"https://octmedina.github.io/ksnet/articles/color.html","id":"escalas-continuas","dir":"Articles","previous_headings":"","what":"Escalas continuas","title":"Colores","text":"Para visualizar variables continuas, tenemos varias escalas disponibles. La escala predefinida está basada en el verde KSNET, pero también tenemos: Verde Amarillo Rojo Gris   Además de las escalas monocolor, tenemos dos escalas bicolor: Verde y amarillo Rojo y amarillo  Algunos ejemplos:","code":"color_ksnet(\"verde\") color_ksnet(\"gris\") color_ksnet(\"verde_amarillo\") ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = body_mass_g)) +      geom_point() +     theme_ksnet() +     scale_color_ksnet_continuous(\"verde_amarillo\") +     labs(title = \"Escala bicolor con verde y amarillo\") #> Warning: Removed 2 rows containing missing values (geom_point). ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = body_mass_g)) +      geom_point() +     theme_ksnet() +     scale_color_ksnet_continuous(\"rojo_amarillo\") +     labs(title = \"Escala bicolor con rojo y amarillo\") #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/articles/documentos.html","id":"documentos","dir":"Articles","previous_headings":"","what":"Documentos","title":"Documentos","text":"Con el paquete ksnet también se pueden generar plantillas para documentos que incluyan el estilo y logos de KSNET. Ahora mismo hay disponibles dos opciones: Documento de word Presentación xaringan","code":""},{"path":[]},{"path":[]},{"path":"https://octmedina.github.io/ksnet/articles/graficas.html","id":"gráficos","dir":"Articles","previous_headings":"","what":"Gráficos","title":"Gráficas","text":"Este es un ejemplo básico que muestra cómo resolver un problema común: hacer una gráfica con datos. Empecemos con un histograma.  La función se puede usar con la pipe también. Aquí hay una gráfica de barra.  Y finalmente, scatterplots. La función viene preparada para incluir el color estándar de KSNET, así como la plantilla de gráficos. El objeto que genera es un ggplot, así que se pueden añadir títulos y etiquetas fácilmente:","code":"## Plotting a histogram of penguin bill length  ksnet_hist(penguins, bill_length_mm)  #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 2 rows containing non-finite values (stat_bin). library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ## Simple barplot penguins %>%     group_by(species) %>%     count() %>%     ksnet_bar(species, n) ## Simple scatterplot penguins %>%     ksnet_scatter(bill_length_mm, flipper_length_mm) +     labs(title = \"Pingüinos KSNET\",          subtitle = \"Según con la EPA\") #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/articles/graficas.html","id":"themes","dir":"Articles","previous_headings":"","what":"Themes","title":"Gráficas","text":"También podemos utilizar themes, o plantillas de gráficas.","code":"ksnet_scatter(penguins, bill_length_mm, flipper_length_mm) +    labs(title = \"Esto es un ejemplo\",        subtitle = \"Y esto un subtítulo\") +   theme_ksnet() #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/authors.html","id":null,"dir":"","previous_headings":"","what":"Autores","title":"Autores y Citas","text":"Octavio Medina. Autor-, mantenedor-.","code":""},{"path":"https://octmedina.github.io/ksnet/authors.html","id":"citation","dir":"","previous_headings":"","what":"Cita","title":"Autores y Citas","text":"Medina O (2022). ksnet: Herramientas para el día día en KSNET. R package version 0.0.0.9000, https://octmedina.github.io/ksnet/.","code":"@Manual{,   title = {ksnet: Herramientas para el día a día en KSNET},   author = {Octavio Medina},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://octmedina.github.io/ksnet/}, }"},{"path":"https://octmedina.github.io/ksnet/index.html","id":"ksnet","dir":"","previous_headings":"","what":"Herramientas para el día a día en KSNET","title":"Herramientas para el día a día en KSNET","text":"El objetivo del paquete ksnet es simplificar las rutinas de trabajo analítico de KSNET. El objetivo es incluir elementos como: Gráficos sencillos para análisis exploratorio de datos usando ggplot2 Funciones auxiliares para la limpieza y análisis de datos Plantillas para presentaciones, informes y resúmenes ejecutivos Plantillas para gráficas Funciones para ayudar exportar datos y resultados en formatos accesibles etcétera","code":""},{"path":"https://octmedina.github.io/ksnet/index.html","id":"instalación","dir":"","previous_headings":"","what":"Instalación","title":"Herramientas para el día a día en KSNET","text":"Se puede instalar la versión en desarrollo desde GitHub con:","code":"# install.packages(\"devtools\") devtools::install_github(\"octmedina/ksnet\")"},{"path":"https://octmedina.github.io/ksnet/index.html","id":"gráficos","dir":"","previous_headings":"","what":"Gráficos","title":"Herramientas para el día a día en KSNET","text":"Este es un ejemplo básico que muestra cómo resolver un problema común: hacer una gráfica con datos. Empecemos con un histograma.  La función se puede usar con la pipe también. Aquí hay una gráfica de barra.  Y finalmente, scatterplots. La función viene preparada para incluir el color estándar de KSNET, así como la plantilla de gráficos. El objeto que genera es un ggplot, así que se pueden añadir títulos y etiquetas fácilmente:","code":"library(ksnet) library(palmerpenguins) library(ggplot2)  ## Plotting a histogram of penguin bill length  ksnet_hist(penguins, bill_length_mm)  #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Warning: Removed 2 rows containing non-finite values (stat_bin). library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ## Simple barplot penguins %>%     group_by(species) %>%     count() %>%     ksnet_bar(species, n) ## Simple scatterplot penguins %>%     ksnet_scatter(bill_length_mm, flipper_length_mm) +     labs(title = \"Pingüinos KSNET\",          subtitle = \"Según con la EPA\") #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/index.html","id":"themes","dir":"","previous_headings":"","what":"Themes","title":"Herramientas para el día a día en KSNET","text":"También podemos utilizar themes, o plantillas de gráficas.","code":"ksnet_scatter(penguins, bill_length_mm, flipper_length_mm) +    labs(title = \"Esto es un ejemplo\",        subtitle = \"Y esto un subtítulo\") +   theme_ksnet() #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/index.html","id":"paletas-de-colores","dir":"","previous_headings":"","what":"Paletas de colores","title":"Herramientas para el día a día en KSNET","text":"Por último, hemos creado paletas de colores. Por ahora hay dos: ksnet_classic y ksnet_bright. Para visualizarlas, basta con utilizar la función color_ksnet.   Este es el aspecto que tiene cuando lo combinamos con una gráfica.","code":"color_ksnet(\"classic\") color_ksnet(\"bright\") penguins %>%     group_by(species) %>%     count() %>%     ggplot(aes(species, n, fill = species)) +    geom_col() +   labs(title = \"Pingüinos una vez más\",        subtitle = \"Con subtítulo\") +   theme_ksnet() +   scale_fill_ksnet_discrete() ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = species)) +    geom_point() +   labs(title = \"This is a sample plot\",        subtitle = \"And this is the subtitle\") +   theme_ksnet() +   scale_color_ksnet_discrete() #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/index.html","id":"escalas-continuas","dir":"","previous_headings":"","what":"Escalas continuas","title":"Herramientas para el día a día en KSNET","text":"Para visualizar variables continuas, tenemos varias escalas disponibles. La escala predefinida está basada en el verde KSNET, pero también tenemos: Verde Amarillo Rojo Gris    Además de las escalas monocolor, tenemos dos escalas bicolor: Verde y amarillo Rojo y amarillo  Algunos ejemplos:","code":"color_ksnet(\"verde\") color_ksnet(\"gris\") ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = body_mass_g)) +      geom_point() +     theme_ksnet() +     scale_color_ksnet_continuous(\"verde\") +     labs(title = \"Escala monocolor con verde KSNET\") #> Warning: Removed 2 rows containing missing values (geom_point). color_ksnet(\"verde_amarillo\") ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = body_mass_g)) +      geom_point() +     theme_ksnet() +     scale_color_ksnet_continuous(\"verde_amarillo\") +     labs(title = \"Escala bicolor con verde y amarillo\") #> Warning: Removed 2 rows containing missing values (geom_point). ggplot(penguins, aes(bill_length_mm, flipper_length_mm, color = body_mass_g)) +      geom_point() +     theme_ksnet() +     scale_color_ksnet_continuous(\"rojo_amarillo\") +     labs(title = \"Escala bicolor con rojo y amarillo\") #> Warning: Removed 2 rows containing missing values (geom_point)."},{"path":"https://octmedina.github.io/ksnet/reference/color_ksnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Aplicar un color KSNET a las figuras — color_ksnet","title":"Aplicar un color KSNET a las figuras — color_ksnet","text":"Aplicar un color KSNET las figuras","code":""},{"path":"https://octmedina.github.io/ksnet/reference/color_ksnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Aplicar un color KSNET a las figuras — color_ksnet","text":"","code":"color_ksnet(   palette = \"classic\",   reverse = FALSE,   n,   type = c(\"discrete\", \"continuous\"),   ... )"},{"path":[]},{"path":[]},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_bar.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a bar chart — ksnet_bar","title":"Generate a bar chart — ksnet_bar","text":"function generates ggplot2 object, easily expanded labels, themes, elements.","code":""},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_bar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Generate a bar chart — ksnet_bar","text":"","code":"ksnet_bar(data, xvar, yvar, fill = color_ksnet()[1])"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_bar.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Generate a bar chart — ksnet_bar","text":"data data.frame xvar variable yvar variable","code":""},{"path":[]},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_bar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Generate a bar chart — ksnet_bar","text":"","code":"x <- c(\"A\",\"B\",\"C\",\"D\") y <- c(5, 8, 12,15) my_data <- data.frame(x = x, y = y) ksnet_bar(my_data, x, y)"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_hist.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a histogram with ksnet styling — ksnet_hist","title":"Generate a histogram with ksnet styling — ksnet_hist","text":"Explore distribution data histogram. function generates ggplot2 object, easily expanded.","code":""},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_hist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Generate a histogram with ksnet styling — ksnet_hist","text":"","code":"ksnet_hist(data, xvar, fill = color_ksnet()[1])"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_hist.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Generate a histogram with ksnet styling — ksnet_hist","text":"data data.frame xvar variable","code":""},{"path":[]},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_hist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Generate a histogram with ksnet styling — ksnet_hist","text":"","code":"my_data <- data.frame(x = c(1,2,3,4,5)) ksnet_hist(my_data, x) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_scatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a scatterplot — ksnet_scatter","title":"Generate a scatterplot — ksnet_scatter","text":"Explore distribution data scatterplot function generates ggplot2 object, easily expanded labels, themes, elements.","code":""},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_scatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Generate a scatterplot — ksnet_scatter","text":"","code":"ksnet_scatter(data, xvar, yvar, color = color_ksnet()[1])"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_scatter.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Generate a scatterplot — ksnet_scatter","text":"data data.frame xvar variable yvar variable","code":""},{"path":[]},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_scatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Generate a scatterplot — ksnet_scatter","text":"","code":"x <- rnorm(100) y <-  rnorm(100, x, 1) my_data <- data.frame(x = x, y = y) ksnet_scatter(my_data, x, y)"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabla al estilo de KSNET (con gt) — ksnet_table","title":"Tabla al estilo de KSNET (con gt) — ksnet_table","text":"Tabla al estilo de KSNET (con gt)","code":""},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Tabla al estilo de KSNET (con gt) — ksnet_table","text":"","code":"ksnet_table(df)"},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_table.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Tabla al estilo de KSNET (con gt) — ksnet_table","text":"df dataframe para hacer la tabla","code":""},{"path":"https://octmedina.github.io/ksnet/reference/ksnet_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Tabla al estilo de KSNET (con gt) — ksnet_table","text":"","code":"x <- c(\"Barcelona\", \"Madrid\", \"Murcia\") y <-  c(115, 90, 145) z  <- c(2019, 2020, 2019) mis_datos <- data.frame(provincia = x, variable = y, fecha = z) ksnet_table(mis_datos) #> <div id=\"zanhavwfwp\" style=\"overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>html { #>   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; #> } #>  #> #zanhavwfwp .gt_table { #>   display: table; #>   border-collapse: collapse; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 12px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: 250px; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #zanhavwfwp .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 0; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #zanhavwfwp .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_col_heading { #>   color: #FFFFFF; #>   background-color: #00B2A9; #>   font-size: 14px; #>   font-weight: bold; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #zanhavwfwp .gt_column_spanner_outer { #>   color: #FFFFFF; #>   background-color: #00B2A9; #>   font-size: 14px; #>   font-weight: bold; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #zanhavwfwp .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #zanhavwfwp .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #zanhavwfwp .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #zanhavwfwp .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #zanhavwfwp .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #zanhavwfwp .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #zanhavwfwp .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #zanhavwfwp .gt_row { #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #zanhavwfwp .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zanhavwfwp .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #zanhavwfwp .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #zanhavwfwp .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zanhavwfwp .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #zanhavwfwp .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zanhavwfwp .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #zanhavwfwp .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-left: 4px; #>   padding-right: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zanhavwfwp .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #zanhavwfwp .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zanhavwfwp .gt_left { #>   text-align: left; #> } #>  #> #zanhavwfwp .gt_center { #>   text-align: center; #> } #>  #> #zanhavwfwp .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #zanhavwfwp .gt_font_normal { #>   font-weight: normal; #> } #>  #> #zanhavwfwp .gt_font_bold { #>   font-weight: bold; #> } #>  #> #zanhavwfwp .gt_font_italic { #>   font-style: italic; #> } #>  #> #zanhavwfwp .gt_super { #>   font-size: 65%; #> } #>  #> #zanhavwfwp .gt_footnote_marks { #>   font-style: italic; #>   font-weight: normal; #>   font-size: 75%; #>   vertical-align: 0.4em; #> } #>  #> #zanhavwfwp .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #zanhavwfwp .gt_slash_mark { #>   font-size: 0.7em; #>   line-height: 0.7em; #>   vertical-align: 0.15em; #> } #>  #> #zanhavwfwp .gt_fraction_numerator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: 0.45em; #> } #>  #> #zanhavwfwp .gt_fraction_denominator { #>   font-size: 0.6em; #>   line-height: 0.6em; #>   vertical-align: -0.05em; #> } #> <\/style> #>   <table class=\"gt_table\"> #>    #>   <thead class=\"gt_col_headings\"> #>     <tr> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\">provincia<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">variable<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\">fecha<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td class=\"gt_row gt_left\">Barcelona<\/td> #> <td class=\"gt_row gt_right\">115<\/td> #> <td class=\"gt_row gt_right\">2019<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">Madrid<\/td> #> <td class=\"gt_row gt_right\">90<\/td> #> <td class=\"gt_row gt_right\">2020<\/td><\/tr> #>     <tr><td class=\"gt_row gt_left\">Murcia<\/td> #> <td class=\"gt_row gt_right\">145<\/td> #> <td class=\"gt_row gt_right\">2019<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>"},{"path":"https://octmedina.github.io/ksnet/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://octmedina.github.io/ksnet/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://octmedina.github.io/ksnet/reference/pipe.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://octmedina.github.io/ksnet/reference/pipe.html","id":"valor","dir":"Reference","previous_headings":"","what":"Valor","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://octmedina.github.io/ksnet/reference/print.palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Imprime la paleta — print.palette","title":"Imprime la paleta — print.palette","text":"Imprime la paleta","code":""},{"path":"https://octmedina.github.io/ksnet/reference/print.palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Imprime la paleta — print.palette","text":"","code":"# S3 método para palette print(x, ...)"},{"path":[]},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleta continua de colores de KSNET (color) — scale_color_ksnet_continuous","title":"Paleta continua de colores de KSNET (color) — scale_color_ksnet_continuous","text":"Paleta continua de colores de KSNET (color)","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Paleta continua de colores de KSNET (color) — scale_color_ksnet_continuous","text":"","code":"scale_color_ksnet_continuous(palette = \"verde\", reverse = FALSE, ...)"},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_continuous.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Paleta continua de colores de KSNET (color) — scale_color_ksnet_continuous","text":"palette Nombre de la paleta (\"verde\", \"gris\", \"amarillo\", \"rojo\", \"verde_amarillo\", \"rojo_amarillo\") reverse Booleano para revertir la paleta (TRUE o FALSE) ... Argumentos adicionales","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Paleta continua de colores de KSNET (color) — scale_color_ksnet_continuous","text":"","code":"library(ggplot2) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union x <- rnorm(100) y <-  rnorm(100, x, 1) z <-  rnorm(100) mis_datos <- data.frame(variable = x, valor = y, valor2 = z) mis_datos %>% ggplot(aes(x = variable, y = valor, color = valor2)) + geom_point() + scale_color_ksnet_continuous() + theme_ksnet()"},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleta discreta de colores de KSNET (color) — scale_color_ksnet_discrete","title":"Paleta discreta de colores de KSNET (color) — scale_color_ksnet_discrete","text":"Paleta discreta de colores de KSNET (color)","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Paleta discreta de colores de KSNET (color) — scale_color_ksnet_discrete","text":"","code":"scale_color_ksnet_discrete(palette = \"classic\", reverse = FALSE, ...)"},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_discrete.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Paleta discreta de colores de KSNET (color) — scale_color_ksnet_discrete","text":"palette El nombre de la paleta (\"classic\", \"bright\") reverse Boolean indicating whether palette reversed ... Argumentos adicionales","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_color_ksnet_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Paleta discreta de colores de KSNET (color) — scale_color_ksnet_discrete","text":"","code":"library(ggplot2) library(dplyr) x <- c(\"A\",\"B\",\"C\",\"D\") y <- c(5, 8, 12,15) mis_datos <- data.frame(variable = x, valor = y) mis_datos %>% ggplot(aes(x = variable, y = valor, color = variable)) + geom_point() + scale_color_ksnet_discrete() + theme_ksnet()"},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleta continua de colores de KSNET (fill) — scale_fill_ksnet_continuous","title":"Paleta continua de colores de KSNET (fill) — scale_fill_ksnet_continuous","text":"Paleta continua de colores de KSNET (fill)","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Paleta continua de colores de KSNET (fill) — scale_fill_ksnet_continuous","text":"","code":"scale_fill_ksnet_continuous(palette = \"verde\", reverse = FALSE, ...)"},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_continuous.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Paleta continua de colores de KSNET (fill) — scale_fill_ksnet_continuous","text":"palette Nombre de la paleta (\"verde\", \"gris\", \"amarillo\", \"rojo\", \"verde_amarillo\", \"rojo_amarillo\") reverse Booleano para revertir la paleta (TRUE o FALSE) ... Argumentos adicionales","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Paleta continua de colores de KSNET (fill) — scale_fill_ksnet_continuous","text":"","code":"library(ggplot2) ggplot(faithfuld, aes(waiting, eruptions)) +    geom_raster(aes(fill = density)) +    scale_fill_ksnet_continuous() +    theme_ksnet()"},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"Paleta discreta de colores de KSNET (fill) — scale_fill_ksnet_discrete","title":"Paleta discreta de colores de KSNET (fill) — scale_fill_ksnet_discrete","text":"Paleta discreta de colores de KSNET (fill)","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Paleta discreta de colores de KSNET (fill) — scale_fill_ksnet_discrete","text":"","code":"scale_fill_ksnet_discrete(palette = \"classic\", reverse = FALSE, ...)"},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_discrete.html","id":"argumentos","dir":"Reference","previous_headings":"","what":"Argumentos","title":"Paleta discreta de colores de KSNET (fill) — scale_fill_ksnet_discrete","text":"palette El nombre de la paleta (\"classic\", \"bright\") reverse Boolean indicating whether palette reversed ... Argumentos adicionales","code":""},{"path":"https://octmedina.github.io/ksnet/reference/scale_fill_ksnet_discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Ejemplos","title":"Paleta discreta de colores de KSNET (fill) — scale_fill_ksnet_discrete","text":"","code":"library(ggplot2) library(dplyr) x <- c(\"A\",\"B\",\"C\",\"D\") y <- c(5, 8, 12,15) mis_datos <- data.frame(variable = x, valor = y) mis_datos %>% ggplot(aes(x = variable, y = valor, fill = variable)) + geom_col() + scale_fill_ksnet_discrete() + theme_ksnet()"},{"path":"https://octmedina.github.io/ksnet/reference/theme_ksnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply the ksnet theme to your graphs — theme_ksnet","title":"Apply the ksnet theme to your graphs — theme_ksnet","text":"Apply ksnet theme graphs","code":""},{"path":"https://octmedina.github.io/ksnet/reference/theme_ksnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Uso","title":"Apply the ksnet theme to your graphs — theme_ksnet","text":"","code":"theme_ksnet()"},{"path":[]},{"path":[]}]
